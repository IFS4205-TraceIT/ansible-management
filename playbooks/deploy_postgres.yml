- name: Deploy PostgreSQL TDE to database hosts
  hosts: "{{ lookup('ansible.builtin.env', 'DB_HOSTS') }}"
  gather_facts: no
  become: yes # Sudo as root

  tasks:

    - name: Create postgres user
      ansible.builtin.user:
        name: postgres
        shell: /bin/false # Don't allow login

    - name: Extract PostgreSQL TDE files to home directory
      ansible.builtin.unarchive:
        src: postgresql_tde.tar.gz
        dest: /home/postgres/
        owner: postgres
        group: postgres

    - name: Create POC key manager file in home directory
      ansible.builtin.copy:
        dest: /home/postgres/key_manager.sh
        owner: postgres
        group: postgres
        mode: 0500
        content: |
          #!/bin/bash
          echo "${ENCRYPTION_KEY}"

    - name: Create database folder
      ansible.builtin.file:
        path: /opt/postgresql_db/
        state: directory
        owner: postgres
        group: postgres

    - name: Initialize database cluster
      become: yes
      become_user: postgres
      args:
        chdir: /home/postgres/postgresql_tde/bin
      ansible.builtin.command:
        argv:
          - ./initdb
          - -D
          - /opt/postgresql_db/
          - -K
          - /home/postgres/key_manager.sh
        creates: /opt/postgresql_db/PG_VERSION # Used to track if cluster is already created
      environment:
        LD_LIBRARY_PATH: /home/postgres/postgresql_tde/lib
        ENCRYPTION_KEY: "{{ lookup('ansible.builtin.env', 'TDE_KEY') }}"

    - name: Create database log
      ansible.builtin.file:
        path: /var/log/postgresql_tde.log
        state: touch
        owner: postgres
        group: postgres
        mode: 0600

    - name: Apply pg_hba.conf
      become: yes
      become_user: postgres
      ansible.builtin.copy:
        src: postgresql/pg_hba.conf
        dest: /opt/postgresql_db/pg_hba.conf
        owner: postgres
        group: postgres
        mode: 0600
       
    - name: Apply postgresql.conf
      become: yes
      become_user: postgres
      ansible.builtin.copy:
        src: postgresql/postgresql.conf
        dest: /opt/postgresql_db/postgresql.conf
        owner: postgres
        group: postgres
        mode: 0600

    - name: Request new server certificate
      community.hashi_vault.vault_write:
        url: "{{ lookup('ansible.builtin.env', 'VAULT_ADDR') }}"
        path: pki_int/issue/{{ lookup('ansible.builtin.env', 'DB_HOSTS') }}
        auth_method: token
        token: "{{ lookup('ansible.builtin.env', 'VAULT_TOKEN') }}"
        validate_certs: yes
        token_validate: false
        data:
          common_name: "{{ lookup('ansible.builtin.env', 'DB_HOSTS') }}"
          ttl: 767h
      register: server_certificate_output

    - name: Add server certificate
      become: yes
      become_user: postgres
      ansible.builtin.copy:
        dest: /opt/postgresql_db/server.crt
        owner: postgres
        group: postgres
        mode: 0600
        content: "{{ server_certificate_output.data.data.certificate }}"

    - name: Add server private key
      become: yes
      become_user: postgres
      ansible.builtin.copy:
        dest: /opt/postgresql_db/server.key
        owner: postgres
        group: postgres
        mode: 0600
        content: "{{ server_certificate_output.data.data.private_key }}"

    - name: Start database service
      become: yes
      become_user: postgres
      args:
        chdir: /home/postgres/postgresql_tde/bin
      ansible.builtin.command:
        argv:
          - ./pg_ctl
          - -D
          - /opt/postgresql_db/
          - -l
          - /var/log/postgresql_tde.log
          - start
      environment:
        LD_LIBRARY_PATH: /home/postgres/postgresql_tde/lib
        ENCRYPTION_KEY: "{{ lookup('ansible.builtin.env', 'TDE_KEY') }}"

    - name: Set password for root user
      become: yes
      become_user: postgres
      args:
        chdir: /home/postgres/postgresql_tde/bin
      ansible.builtin.command:
        argv:
          - ./psql
          - -c  
          - ALTER USER postgres PASSWORD '{{ lookup("ansible.builtin.env", "POSTGRES_ROOT_PASSWORD") }}';
      environment:
        LD_LIBRARY_PATH: /home/postgres/postgresql_tde/lib  

- name: Configure dynamic secrets for PostgreSQL
  hosts: vault
  gather_facts: no
  become: yes
  become_user: vault

  environment:
    VAULT_TOKEN: "{{ lookup('ansible.builtin.env', 'VAULT_TOKEN') }}"
    VAULT_ADDR: "{{ lookup('ansible.builtin.env', 'VAULT_ADDR') }}"

  tasks:

    - name: Configure PostgreSQL secrets engine
      ansible.builtin.command:
        argv:
          - vault
          - write
          - database/config/{{ lookup('ansible.builtin.env', 'DB_HOSTS') }}
          - plugin_name=postgresql-database-plugin
          - connection_url=postgresql://{{ '{{username}}' }}:{{ '{{password}}' }}@{{ lookup('ansible.builtin.env', 'DB_HOSTS') }}:5432/postgres?sslmode=verify-ca&sslrootcert=/usr/local/share/ca-certificates/traceit-ca.crt
          - allowed_roles=*
          - username=postgres
          - password={{ lookup('ansible.builtin.env', 'POSTGRES_ROOT_PASSWORD') }}

    - name: Define creation SQL query
      ansible.builtin.copy:
        dest: /home/vault/root.sql
        owner: vault
        group: vault
        mode: 0700
        content: |
          CREATE ROLE "{{ '{{name}}' }}" WITH LOGIN PASSWORD '{{ '{{password}}' }}' VALID UNTIL '{{ '{{expiration}}' }}' INHERIT;
          GRANT postgres TO "{{ '{{name}}' }}";
    
    - name: Create role
      ansible.builtin.command:
        argv:
          - vault
          - write
          - database/roles/root
          - db_name={{ lookup('ansible.builtin.env', 'DB_HOSTS') }}
          - creation_statements=@/home/vault/root.sql